package com.jet.project.service;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;

import org.apache.commons.codec.binary.Base64;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.ParseException;

import com.jet.project.util.Config;
import com.jet.project.util.UrlUtil;


public class TwitterFeeds implements Feeds{
	private final static String getTokenURL = "https://api.twitter.com/oauth2/token";
	private static String bearerToken;


	@Override
	public JSONArray getFeeds() throws ParseException, IOException {
		bearerToken = requestBearerToken(getTokenURL);
		return fetchTimelineTweet(Config.getProp("twitter_url"));
	}


	public static void main(String[] args) {

		// encodeKeys(APIKEY, APISECRET);

		new Thread(new Runnable() {

			@Override
			public void run() {
				try {

					bearerToken = requestBearerToken(getTokenURL);
					fetchTimelineTweet(Config.getProp("twitter_url"));

				} catch (IOException e) {
					System.out.println("IOException e");
					e.printStackTrace();
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}).start();

	}

	// Encodes the consumer key and secret to create the basic authorization key
	private static String encodeKeys(String consumerKey, String consumerSecret) {
		try {
			String encodedConsumerKey = URLEncoder.encode(consumerKey, "UTF-8");
			String encodedConsumerSecret = URLEncoder.encode(consumerSecret,
					"UTF-8");

			String fullKey = encodedConsumerKey + ":" + encodedConsumerSecret;
			byte[] encodedBytes = Base64.encodeBase64(fullKey.getBytes());

			return new String(encodedBytes);
		} catch (UnsupportedEncodingException e) {
			return new String();
		}
	}

	// Constructs the request for requesting a bearer token and returns that
	// token as a string
	private static String requestBearerToken(String endPointUrl)
			throws IOException {
		HttpURLConnection connection = null;
		String encodedCredentials = encodeKeys(Config.getProp("twitter_consumer_key"), Config.getProp("twitter_consumer_key_secret"));

		System.out.println("encodedCredentials "+encodedCredentials);
		try {
			URL url = new URL(endPointUrl);
			connection = (HttpURLConnection) url.openConnection();
			System.out.println(connection);
			connection.setDoOutput(true);
			connection.setRequestMethod("POST");
			//connection.setRequestProperty("Host", "api.twitter.com");
			//connection.setRequestProperty("User-Agent", "anyApplication");
			connection.setRequestProperty("Authorization", "Basic "
					+ encodedCredentials);
			connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");


			UrlUtil.writeRequest(connection, "grant_type=client_credentials");

			// Parse the JSON response into a JSON mapped object to fetch fields
			// from.
			JSONObject obj = (JSONObject) JSONValue.parse(UrlUtil.readResponse(connection));

			if (obj != null) {
				String tokenType = (String) obj.get("token_type");
				String token = (String) obj.get("access_token");

				return ((tokenType.equals("bearer")) && (token != null)) ? token
						: "";
			}
			return new String();
		} 
		finally {
			if (connection != null) {
				connection.disconnect();
			}
		}
	}

	// Fetches the first tweet from a given user's timeline
	private static JSONArray fetchTimelineTweet(String endPointUrl)
			throws IOException, ParseException {
		HttpURLConnection connection = null;

		try {
			URL url = new URL(endPointUrl);
			connection = (HttpURLConnection) url.openConnection();
			connection.setRequestProperty("Authorization", "Bearer " +  bearerToken);
			return UrlUtil.consumeJSONResponse(connection);
		} finally {
			if (connection != null) {
				connection.disconnect();
			}
		}
	}


}
