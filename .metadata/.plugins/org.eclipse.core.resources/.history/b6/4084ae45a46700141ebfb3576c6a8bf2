package com.jet.project.service;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;

import javax.net.ssl.HttpsURLConnection;

import org.apache.commons.codec.binary.Base64;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

import com.jet.project.util.Config;
import com.jet.project.util.UrlUtil;


public class TwitterFeeds {
	private final static String getTokenURL = "https://api.twitter.com/oauth2/token";
	 private static String bearerToken;

	/**
	 * @param args
	 */
	public static void main(String[] args) {

	    // encodeKeys(APIKEY, APISECRET);

	    new Thread(new Runnable() {

	        @Override
	        public void run() {
	            try {

	                bearerToken = requestBearerToken(getTokenURL);
	                fetchTimelineTweet(Config.getProp("twitter_url"));

	            } catch (IOException e) {
	                System.out.println("IOException e");
	                e.printStackTrace();
	            }
	        }
	    }).start();

	}

	// Encodes the consumer key and secret to create the basic authorization key
	private static String encodeKeys(String consumerKey, String consumerSecret) {
	    try {
	        String encodedConsumerKey = URLEncoder.encode(consumerKey, "UTF-8");
	        String encodedConsumerSecret = URLEncoder.encode(consumerSecret,
	                "UTF-8");

	        String fullKey = encodedConsumerKey + ":" + encodedConsumerSecret;
	        byte[] encodedBytes = Base64.encodeBase64(fullKey.getBytes());

	        return new String(encodedBytes);
	    } catch (UnsupportedEncodingException e) {
	        return new String();
	    }
	}

	// Constructs the request for requesting a bearer token and returns that
	// token as a string
	private static String requestBearerToken(String endPointUrl)
	        throws IOException {
	    HttpsURLConnection connection = null;
	    String encodedCredentials = encodeKeys(Config.getProp("twitter_consumer_key"), Config.getProp("twitter_consumer_key_secret"));

	    System.out.println("encodedCredentials "+encodedCredentials);
	    try {
	        URL url = new URL(endPointUrl);
	        connection = (HttpsURLConnection) url.openConnection();
	        System.out.println(connection);
	        connection.setDoOutput(true);
	        connection.setRequestMethod("POST");
	        //connection.setRequestProperty("Host", "api.twitter.com");
	        //connection.setRequestProperty("User-Agent", "anyApplication");
	        connection.setRequestProperty("Authorization", "Basic "
	                + encodedCredentials);
	        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
	       

	        UrlUtil.writeRequest(connection, "grant_type=client_credentials");

	        // Parse the JSON response into a JSON mapped object to fetch fields
	        // from.
	        JSONObject obj = (JSONObject) JSONValue.parse(UrlUtil.readResponse(connection));

	        if (obj != null) {
	            String tokenType = (String) obj.get("token_type");
	            String token = (String) obj.get("access_token");

	            return ((tokenType.equals("bearer")) && (token != null)) ? token
	                    : "";
	        }
	        return new String();
	    } 
	    finally {
	        if (connection != null) {
	            connection.disconnect();
	        }
	    }
	}

	// Fetches the first tweet from a given user's timeline
	private static String fetchTimelineTweet(String endPointUrl)
	        throws IOException {
	    HttpsURLConnection connection = null;

	    try {
	        URL url = new URL(endPointUrl);
	        connection = (HttpsURLConnection) url.openConnection();
	        //connection.setDoOutput(true);
	        //connection.setDoInput(true);
	        //connection.setRequestMethod("GET");
	        //connection.setRequestProperty("Host", "api.twitter.com");
	        //connection.setRequestProperty("User-Agent", "anyApplication");
	         connection.setRequestProperty("Authorization", "Bearer " +  bearerToken);
	        //connection.setUseCaches(false);

	        // Parse the JSON response into a JSON mapped object to fetch fields
	        // from.
	        JSONArray obj = (JSONArray) JSONValue.parse(UrlUtil.readResponse(connection));
	        System.out.println("JSON obj = "+obj);

	        if (obj != null) {
	            String tweet = ((JSONObject) obj.get(0)).get("text").toString();
	            System.out.println(tweet);
	            return (tweet != null) ? tweet : "";
	        }
	        return new String();
	    } catch (MalformedURLException e) {
	        throw new IOException("Invalid endpoint URL specified.", e);
	    } finally {
	        if (connection != null) {
	            connection.disconnect();
	        }
	    }
	}

	
}
